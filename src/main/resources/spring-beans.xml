<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/task
		http://www.springframework.org/schema/task/spring-task-3.1.xsd">
		
	<!-- 开启注解扫描 -->
	<context:component-scan base-package="com.wen.project" use-default-filters="true">
		<context:exclude-filter type="regex" expression="com.wen.project.domain.*"/>
		<context:exclude-filter type="regex" expression="com.wen.project.dto.*"/>
		<context:exclude-filter type="regex" expression="com.wen.project.utils.*"/>
	</context:component-scan>
	
    <!-- 让配置文件中的配置可以以${}方式访问 -->
    <context:property-placeholder file-encoding="utf-8" location="classpath*:*.properties"/>
	
	<!-- 数据源配置 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<property name="minPoolSize" value="${jdbc.minPoolSize}" />
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		<property name="maxIdleTime" value="1800" />
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
	</bean>
	
	<!-- mybatis配置 -->
	<bean id="sqlSessionFactory" class="com.wen.framework.orm.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:mybatis-configuration.xml"/>
		<property name="mapperLocations" value="classpath*:com/wen/project/domain/*/*.xml"/>
		<property name="typeAliasesPackage" value="com.wen.project.domain"/>
	</bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.wen.project.dao" />
	</bean>
	
 	<!-- 定义事务管理器 -->
	<bean id="myBatisTxManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
 	<!-- 基本事务定义,使用transactionManager作事务管理 -->
	<tx:advice id="txAdvice" transaction-manager="myBatisTxManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true"/>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="load*" read-only="true"/>
			<tx:method name="query*" read-only="true"/>
			<tx:method name="*" read-only="false" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
	
 	<!-- 配置事务切入点 -->
	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* com.wen..*Service.*(..))" advice-ref="txAdvice"/>
	</aop:config>
	
	<!-- 线程池 -->
	<bean id="threadPool" class="com.wen.framework.utils.ThreadPool" scope="singleton">
		<property name="corePoolSize" value="${threadPool.corePoolSize}"/>
		<property name="maxPoolSize" value="${threadPool.maxPoolSize}"/>
		<property name="keepAliveTime" value="${threadPool.keepAliveTime}"/>
		<property name="workQueueSize" value="${threadPool.workQueueSize}"/>
	</bean>
	
	<!-- 计划任务 -->
	<task:executor id="executor" pool-size="2" />
    <!-- 所有@Scheduled的方法共用该scheduler -->
    <task:scheduler id="scheduler" pool-size="2" />
    <task:annotation-driven executor="executor" scheduler="scheduler" />
</beans>